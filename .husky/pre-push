#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

# Load deployment configuration
CONFIG_SCRIPT="scripts/deployment-config.js"
if [ -f "$CONFIG_SCRIPT" ]; then
  # Check if deployment is enabled
  DEPLOYMENT_ENABLED=$(node "$CONFIG_SCRIPT" get deployment.enabled 2>/dev/null)
  
  if [ "$DEPLOYMENT_ENABLED" = "false" ]; then
    echo "Deployment checks disabled in config. Proceeding with push..."
    exit 0
  fi
  
  # Check if dry run mode
  DRY_RUN=$(node "$CONFIG_SCRIPT" get features.dryRun 2>/dev/null)
  if [ "$DRY_RUN" = "true" ]; then
    echo "DRY RUN MODE - Skipping actual deployment checks"
    exit 0
  fi
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo "${BLUE}🚀 Starting pre-push deployment checks...${NC}"

# Function to check if a feature is enabled
is_enabled() {
  local feature=$1
  local enabled=$(node "$CONFIG_SCRIPT" get "checks.$feature.enabled" 2>/dev/null)
  [ "$enabled" = "true" ]
}

# Function to get timeout value
get_timeout() {
  local timeout_name=$1
  local default_value=$2
  local timeout=$(node "$CONFIG_SCRIPT" get "timeouts.$timeout_name" 2>/dev/null)
  if [ -z "$timeout" ]; then
    echo "$default_value"
  else
    echo "$timeout"
  fi
}

# 1. Check Git Status (if enabled)
if is_enabled "gitStatus"; then
  echo "${YELLOW}Checking git status...${NC}"
  
  # Get exceptions from config
  EXCEPTIONS=$(node "$CONFIG_SCRIPT" get checks.gitStatus.exceptions 2>/dev/null)
  
  # Check for uncommitted changes
  if [ -n "$(git status --porcelain)" ]; then
    ALLOW_MODIFIED=$(node "$CONFIG_SCRIPT" get checks.gitStatus.allowModified 2>/dev/null)
    if [ "$ALLOW_MODIFIED" != "true" ]; then
      echo "${RED}❌ Uncommitted changes detected. Please commit or stash them first.${NC}"
      git status --short
      exit 1
    fi
  fi
fi

# 2. Run TypeScript checks (if enabled)
if is_enabled "typescript"; then
  echo "${YELLOW}Running TypeScript checks...${NC}"
  
  AUTO_FIX=$(node "$CONFIG_SCRIPT" get checks.typescript.autoFix 2>/dev/null)
  if [ "$AUTO_FIX" = "true" ]; then
    npm run type-check 2>&1 | tee .deployment/typescript.log
  else
    npm run type-check
  fi
  
  if [ $? -ne 0 ]; then
    echo "${RED}❌ TypeScript errors found${NC}"
    exit 1
  fi
fi

# 3. Run Linting (if enabled)
if is_enabled "linting"; then
  echo "${YELLOW}Running linting checks...${NC}"
  
  AUTO_FIX=$(node "$CONFIG_SCRIPT" get checks.linting.autoFix 2>/dev/null)
  if [ "$AUTO_FIX" = "true" ]; then
    npm run lint -- --fix
  else
    npm run lint
  fi
  
  if [ $? -ne 0 ]; then
    FAIL_ON_WARNING=$(node "$CONFIG_SCRIPT" get checks.linting.failOnWarning 2>/dev/null)
    if [ "$FAIL_ON_WARNING" = "true" ]; then
      echo "${RED}❌ Linting errors or warnings found${NC}"
      exit 1
    fi
  fi
fi

# 4. Run Tests (if enabled)
if is_enabled "tests.unit"; then
  echo "${YELLOW}Running unit tests...${NC}"
  
  TEST_TIMEOUT=$(get_timeout "testTimeout" "120000")
  COVERAGE_THRESHOLD=$(node "$CONFIG_SCRIPT" get checks.tests.unit.coverageThreshold 2>/dev/null)
  
  # Run tests with timeout
  timeout_cmd=""
  if command -v timeout >/dev/null 2>&1; then
    timeout_cmd="timeout $((TEST_TIMEOUT / 1000))s"
  fi
  
  $timeout_cmd npm run test:coverage
  
  if [ $? -ne 0 ]; then
    REQUIRED=$(node "$CONFIG_SCRIPT" get checks.tests.unit.required 2>/dev/null)
    if [ "$REQUIRED" = "true" ]; then
      echo "${RED}❌ Unit tests failed${NC}"
      exit 1
    else
      echo "${YELLOW}⚠️  Unit tests failed but not required${NC}"
    fi
  fi
fi

# 5. Run Build (if enabled)
if is_enabled "build"; then
  echo "${YELLOW}Running production build...${NC}"
  
  BUILD_TIMEOUT=$(get_timeout "buildTimeout" "300000")
  
  # Run build with timeout
  timeout_cmd=""
  if command -v timeout >/dev/null 2>&1; then
    timeout_cmd="timeout $((BUILD_TIMEOUT / 1000))s"
  fi
  
  $timeout_cmd npm run build
  
  if [ $? -ne 0 ]; then
    echo "${RED}❌ Build failed${NC}"
    
    # Check if auto-fix is enabled
    AUTO_FIX_ENABLED=$(node "$CONFIG_SCRIPT" get autoFix.enabled 2>/dev/null)
    if [ "$AUTO_FIX_ENABLED" = "true" ]; then
      echo "${YELLOW}Attempting auto-fix...${NC}"
      node scripts/auto-fix-build.js
      
      # Retry build
      $timeout_cmd npm run build
      if [ $? -ne 0 ]; then
        echo "${RED}❌ Build still failing after auto-fix${NC}"
        exit 1
      fi
    else
      exit 1
    fi
  fi
fi

# 6. Run Security Checks (if enabled)
if is_enabled "security"; then
  echo "${YELLOW}Running security checks...${NC}"
  
  SCAN_DEPS=$(node "$CONFIG_SCRIPT" get checks.security.scanDependencies 2>/dev/null)
  if [ "$SCAN_DEPS" = "true" ]; then
    npm audit --audit-level=moderate
    
    if [ $? -ne 0 ]; then
      BLOCK_HIGH=$(node "$CONFIG_SCRIPT" get checks.security.blockHighSeverity 2>/dev/null)
      if [ "$BLOCK_HIGH" = "true" ]; then
        echo "${RED}❌ Security vulnerabilities found${NC}"
        exit 1
      else
        echo "${YELLOW}⚠️  Security vulnerabilities found but continuing${NC}"
      fi
    fi
  fi
fi

# 7. Run custom pre-deploy scripts
CUSTOM_SCRIPTS=$(node "$CONFIG_SCRIPT" get customScripts.preDeploy 2>/dev/null)
if [ -n "$CUSTOM_SCRIPTS" ] && [ "$CUSTOM_SCRIPTS" != "[]" ]; then
  echo "${YELLOW}Running custom pre-deploy scripts...${NC}"
  # Parse and run custom scripts
  echo "$CUSTOM_SCRIPTS" | jq -r '.[]' 2>/dev/null | while read script; do
    if [ -n "$script" ]; then
      echo "  Running: $script"
      eval "$script"
      if [ $? -ne 0 ]; then
        echo "${RED}❌ Custom script failed: $script${NC}"
        exit 1
      fi
    fi
  done
fi

# Success message
echo "${GREEN}✅ All deployment checks passed!${NC}"
echo "${BLUE}Proceeding with push...${NC}"

# Check if verbose logging is enabled
VERBOSE=$(node "$CONFIG_SCRIPT" get features.verboseLogging 2>/dev/null)
if [ "$VERBOSE" = "true" ]; then
  echo "${YELLOW}Configuration used:${NC}"
  node "$CONFIG_SCRIPT" get
fi

exit 0