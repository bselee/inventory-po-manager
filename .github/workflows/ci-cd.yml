name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '20'
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

jobs:
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run type checking
      run: npm run type-check
      
    - name: Run linting
      run: npm run lint
      
    - name: Run unit tests
      run: npm run test:unit
      
    - name: Run integration tests
      run: npm run test:integration
      
    - name: Generate test coverage
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      if: github.event_name == 'push'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Build application for testing
      run: npm run build
      
    - name: Start application
      run: npm start &
      env:
        NODE_ENV: test
        PORT: 3000
        
    - name: Wait for application to start
      run: npx wait-on http://localhost:3000 --timeout 60000
      
    - name: Run E2E health check tests
      run: npm run test:health-e2e
      
    - name: Run E2E inventory tests
      run: npm run test:inventory
      
    - name: Run E2E settings tests
      run: npm run test:settings
      
    - name: Run comprehensive E2E tests
      run: npm run test:comprehensive
      
    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-report-${{ github.sha }}
        path: playwright-report/
        retention-days: 30
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-results-${{ github.sha }}
        path: test-results/
        retention-days: 30
        
  database-validation:
    name: Database Validation
    runs-on: ubuntu-latest
    needs: [test, e2e-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run database validation
      run: npm run db:validate
      
    - name: Create database backup
      run: npm run db:backup
      
    - name: Upload backup artifacts
      uses: actions/upload-artifact@v3
      with:
        name: database-backup-${{ github.sha }}
        path: ./backups/
        retention-days: 30
        
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=high
      
    - name: Scan for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
        
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, e2e-tests, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ github.sha }}
        path: ./.next/
        retention-days: 7
        
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [build, database-validation]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        
    - name: Wait for deployment
      run: sleep 30
      
    - name: Run health check on deployment
      run: |
        DEPLOY_URL=$(vercel ls --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }} | grep ${{ github.sha }} | awk '{print $2}' | head -1)
        if [ -z "$DEPLOY_URL" ]; then
          echo "Could not find deployment URL"
          exit 1
        fi
        
        echo "Testing deployment at: https://$DEPLOY_URL"
        
        # Test health endpoint
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://$DEPLOY_URL/api/health")
        if [ "$HTTP_STATUS" -ne 200 ]; then
          echo "Health check failed with status: $HTTP_STATUS"
          exit 1
        fi
        
        echo "‚úÖ Deployment health check passed"
        
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance tests
      run: |
        # Install lighthouse CI
        npm install -g @lhci/cli
        
        # Run lighthouse
        lhci autorun --collect.url=https://your-app.vercel.app || true
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results-${{ github.sha }}
        path: ./.lighthouseci/
        retention-days: 30
        
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [deploy, performance-test]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.deploy.result == 'success'
      run: |
        echo "üöÄ Deployment successful!"
        echo "All tests passed and application is live."
        
    - name: Notify on failure
      if: needs.deploy.result == 'failure' || needs.test.result == 'failure'
      run: |
        echo "‚ùå Deployment or tests failed!"
        echo "Please check the logs and fix issues."
        exit 1
