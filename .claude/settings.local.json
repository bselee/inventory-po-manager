{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "permissions": {
    "allow": [
      "Bash(npm install:*)",
      "Bash(cp:*)",
      "Bash(git init:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git remote add:*)",
      "Bash(git push:*)",
      "Bash(git remote set-url:*)",
      "Bash(find:*)",
      "Bash(ls:*)",
      "Bash(mkdir:*)",
      "Bash(npm run build:*)",
      "Bash(touch:*)",
      "Bash(chmod:*)",
      "Bash(./setup-coding-hooks.sh:*)",
      "Bash(pip install:*)",
      "Bash(# Create the rest of the automation setup\nmkdir -p ~/.claude/scripts\n\n# Test if scripts were already created\nls -la ~/.claude/scripts/)",
      "Bash(# Run the script sections that create the automation scripts\nbash -c \"\"$(grep -A 1000 ''# 2. Auto Documentation Generator'' setup-coding-hooks.sh | grep -B 1000 ''echo \"\"‚úÖ All coding automation tools installed!\"\"'')\"\")",
      "Bash(~/.claude/scripts/run-automation.sh:*)",
      "Bash(bash:*)",
      "Bash(/home/buildasoil/.claude/scripts/auto-test-gen-single.sh:*)",
      "Bash(for file in app/api/purchase-orders/route.ts app/api/sync-finale/route.ts app/api/settings/route.ts)",
      "Bash(do)",
      "Bash(done)",
      "Bash(python3:*)",
      "Bash(npx ts-node:*)",
      "Bash(node:*)",
      "Bash(~/.claude/scripts/scaffold-crud.sh:*)",
      "Bash(vercel env pull:*)",
      "Bash(vercel:*)",
      "Bash(npx vercel:*)",
      "Bash(npm run dev:*)",
      "Bash(echo:*)",
      "Bash(curl:*)",
      "Bash(pkill:*)",
      "Bash(git fetch:*)",
      "Bash(grep:*)",
      "Bash(rm:*)",
      "Bash(npm run vercel-deploy:*)",
      "Bash(true)",
      "Bash(gh api:*)",
      "WebFetch(domain:support.finaleinventory.com)",
      "Bash(./scripts/deploy-vercel.sh:*)",
      "Bash(dos2unix:*)",
      "Bash(sed:*)",
      "Bash(diff:*)",
      "WebFetch(domain:developer.finaleinventory.com)",
      "Bash(npm run deploy:check:*)",
      "Bash(API_BASE_URL=https://inventory-po-manager.vercel.app ./test-api-endpoints.sh)",
      "Bash(# Let''s test with more detail\nBASE_URL=\"\"https://inventory-po-manager.vercel.app/api\"\"\n\necho \"\"üîç Detailed API Endpoint Testing...\"\"\necho \"\"====================================\"\"\necho \"\"\"\"\n\n# Test GET endpoints\necho \"\"üìå Testing GET endpoints:\"\"\nfor endpoint in \"\"health\"\" \"\"inventory\"\" \"\"purchase-orders\"\" \"\"settings\"\"; do\n  url=\"\"$BASE_URL/$endpoint\"\"\n  echo -n \"\"  GET /$endpoint: \"\"\n  response=$(curl -s -o /dev/null -w \"\"%{http_code}\"\" \"\"$url\"\")\n  echo \"\"$response\"\"\ndone\n\necho \"\"\"\"\necho \"\"üìå Testing sync endpoints:\"\"\n# Check if these routes exist\nfor endpoint in \"\"sync-finale\"\" \"\"sync-finale/status\"\" \"\"sync-logs\"\"; do\n  url=\"\"$BASE_URL/$endpoint\"\"\n  echo -n \"\"  GET /$endpoint: \"\"\n  response=$(curl -s -o /dev/null -w \"\"%{http_code}\"\" \"\"$url\"\")\n  echo \"\"$response\"\"\ndone\n\necho \"\"\"\"\necho \"\"üìå Testing POST endpoints:\"\"\n# Test POST for vendors (which failed with 405)\necho -n \"\"  POST /vendors: \"\"\ncurl -s -o /dev/null -w \"\"%{http_code}\"\" -X POST \"\"$BASE_URL/vendors\"\" -H \"\"Content-Type: application/json\"\" -d ''{}''\necho \"\"\"\"\n\necho -n \"\"  GET /vendors: \"\"\ncurl -s -o /dev/null -w \"\"%{http_code}\"\" \"\"$BASE_URL/vendors\"\"\necho \"\"\"\")",
      "Bash(git clone:*)",
      "Bash(uv:*)",
      "Bash(npx:*)",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "Bash(npm run:*)",
      "Bash(PORT=3001 npx playwright test \"inventory page loads successfully\" --project=chromium --reporter=list)",
      "Bash(PORT=3001 npx playwright test tests/e2e/inventory-page.spec.ts -g \"inventory page loads successfully\" --project=chromium)",
      "Bash(sudo apt-get:*)",
      "Bash(sudo apt-get install:*)",
      "Bash(PORT=3001 npx playwright test tests/e2e/inventory-page.spec.ts -g \"inventory page loads successfully\" --project=chromium --reporter=list)",
      "Bash(npm test:*)",
      "Bash(timeout:*)",
      "Bash(git rm:*)",
      "Bash(git pull:*)",
      "Bash(npm audit:*)",
      "Bash(PLAYWRIGHT_BASE_URL=http://localhost:3000 npx playwright test tests/e2e/settings/settings-backend.spec.ts --reporter=list --project=chromium)",
      "WebFetch(domain:localhost)",
      "Bash(sudo npx playwright:*)",
      "Bash(git reset:*)",
      "Bash(# Check sync logs\ncurl -s http://localhost:3001/api/sync-logs?limit=5 | head -100\n\n# Check if any sync is running\necho -e \"\"\\n\\nChecking running syncs:\"\"\ncurl -s http://localhost:3001/api/sync-finale/status\n\n# Check inventory count\necho -e \"\"\\n\\nCurrent inventory count:\"\"\ncurl -s http://localhost:3001/api/inventory | grep -o ''\"\"total\"\":[0-9]*'' | cut -d: -f2)",
      "Bash(-H \"Content-Type: application/json\" )",
      "Bash(-d '{\"\"manual\"\": true}' )",
      "Bash(-w \"\\nStatus: %{http_code}\\n\")",
      "WebFetch(domain:inventory-po-manager.vercel.app)",
      "Bash(cat:*)",
      "Bash(for file in finale-cache-service.ts finale-rate-limiter.ts finale-report-api.ts supabase.ts)",
      "Bash(if [ -f \"/mnt/c/Users/BuildASoil/inventory-po-manager/app/lib/$file\" ])",
      "Bash(then)",
      "Bash(else)",
      "Bash(fi)",
      "Bash(for:*)",
      "Bash(mv:*)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(head:*)"
    ],
    "deny": []
  }
}